Resumen

// ## üì¶ Proyecto: Cache con Express y Fibonacci

// Este proyecto es una peque√±a API en Node.js que expone dos endpoints:

// - `/block`: calcula el n√∫mero de Fibonacci de forma recursiva y **sin cach√©**, lo que puede ser lento para valores grandes.
// - `/cache`: utiliza un sistema de **cach√© en memoria con LRU (Least Recently Used)** para almacenar los resultados y acelerar futuras peticiones.

// ### Tecnolog√≠as utilizadas
// - `express`: framework web para Node.js
// - `lru-cache`: m√≥dulo de cach√© basado en el uso m√°s reciente

// ### Objetivo
// Este ejemplo demuestra c√≥mo mejorar el rendimiento de una funci√≥n costosa (como Fibonacci recursivo) usando cach√© con expiraci√≥n.
// Ideal para aprender sobre optimizaci√≥n de rutas en APIs con Node.js.


Mejorar el rendimiento de tu aplicaci√≥n Node.js es posible con t√©cnicas eficaces como el caching y m√©todos de escalamiento. Aprender cu√°ndo aplicar 
cada enfoque te facilitar√° mantener √≥ptimo el rendimiento y aprovechar al m√°ximo los recursos de tu infraestructura.

¬øQu√© es caching y c√≥mo implementarlo en Node.js?
El caching es una t√©cnica clave para optimizar aplicaciones que realizan procesos intensivos. Consiste en almacenar resultados previamente 
calculados para servirlos r√°pidamente a futuros usuarios, evitando repetir tareas costosas:

Reduce significativamente el tiempo de respuesta y aumenta la capacidad de atender m√°s solicitudes.
Puede implementarse f√°cilmente usando m√≥dulos como LRU cache.
¬øC√≥mo se usa LRU cache en Node.js?
Para implementar caching con Node.js, necesitas instalar previamente el m√≥dulo LRU cache:

const LRU = require('lru-cache');

const cache = new LRU({
  max: 1000,
  ttl: 1000 * 60 * 60 // tiempo de vida en milisegundos, en este caso una hora
});
Debes considerar: 
- El n√∫mero m√°ximo de √≠tems que podr√°s guardar. 
- La duraci√≥n del cach√© (time to live, TTL).

Implementar cache es sencillo: verificas primero si el resultado ya existe en el cach√© antes de calcularlo o procesarlo nuevamente.

Los resultados de esta t√©cnica son notables. Mientras un proceso sin cach√© podr√≠a ejecutar pocos requests simult√°neamente, con cach√© 
implementado es posible atender cantidades mucho mayores, aumentando significativamente la eficiencia del servidor.

¬øQu√© factores influyen en la decisi√≥n de escalar una aplicaci√≥n Node.js?
Las m√©tricas claves que inciden directamente en la decisi√≥n de escalar son: 
- Uso de CPU. 
- Utilizaci√≥n del Event Loop (Even Loop). 
- Uso de memoria (heap use).

¬øCu√°ndo escalar horizontalmente?
La escalabilidad horizontal se aplica distribuyendo la carga del proceso entre varias instancias de Node.js, utilizando herramientas como: 
- Balanceadores de carga. 
- Reverse proxies, como NGINX.
- Sistemas de contenedores como Docker. 
- Administradores avanzados como Kubernetes.

Es recomendable optar por escalar de esta forma cuando el uso tanto de CPU como del Event Loop sean altos.

¬øEn qu√© situaci√≥n escalar verticalmente?
Considera escalar verticalmente cuando la carga del Event Loop sea manejable, pero el consumo de CPU alto. Esto implica: 
- Agregar m√°s potencia (core de CPU) a tu actual infraestructura. 
- Utilizar procesos como workers o child processes para distribuir la carga dentro de una misma m√°quina.

¬øC√≥mo afecta la memoria la decisi√≥n de escalamiento?
Recuerda que el l√≠mite predeterminado del espacio del heap en Node.js es de dos gigabytes.
En aplicaciones con bajos requerimientos de memoria, puedes ejecutar m√∫ltiples procesos en una misma m√°quina con suficiente RAM disponible.
Cuando un proceso consume mucha memoria, lo ideal es aislar cada instancia para evitar sobrecargar los recursos.
Monitorear m√©tricas como CPU usage, Even Loop utilization y heap use, junto al an√°lisis del trabajo del garbage collector, es indispensable
para planificar un escalado efectivo acorde a las necesidades reales de tu aplicaci√≥n.

No dudes en compartir experiencias con diferentes enfoques y discutir cu√°l adaptaci√≥n puede funcionar mejor seg√∫n tu contexto y requerimiento espec√≠fico.
¬°An√≠mate a comentar tu caso particular!